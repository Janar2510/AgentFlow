apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentflow-backend
  namespace: agentflow
  labels:
    app: agentflow-backend
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: agentflow-backend
  template:
    metadata:
      labels:
        app: agentflow-backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: agentflow-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: registry.agentflow.dev/agentflow-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: API_HOST
          valueFrom:
            configMapKeyRef:
              name: agentflow-config
              key: API_HOST
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: agentflow-config
              key: API_PORT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: agentflow-config
              key: REDIS_URL
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: api-secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: jwt-secret-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: openai-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: anthropic-api-key
              optional: true
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: aws-access-key-id
              optional: true
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: aws-secret-access-key
              optional: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: tmp
        emptyDir: {}
      - name: uploads
        emptyDir:
          sizeLimit: 1Gi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "agentflow.dev/backend"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentflow-frontend
  namespace: agentflow
  labels:
    app: agentflow-frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agentflow-frontend
  template:
    metadata:
      labels:
        app: agentflow-frontend
        version: v1
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
      containers:
      - name: frontend
        image: registry.agentflow.dev/agentflow-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: nginx-config
        configMap:
          name: agentflow-frontend-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentflow-worker
  namespace: agentflow
  labels:
    app: agentflow-worker
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agentflow-worker
  template:
    metadata:
      labels:
        app: agentflow-worker
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: agentflow-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: worker
        image: registry.agentflow.dev/agentflow-backend:latest
        imagePullPolicy: Always
        command: ["celery"]
        args: ["-A", "app.core.celery", "worker", "--loglevel=info", "--concurrency=4"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: agentflow-config
              key: REDIS_URL
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: openai-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentflow-secrets
              key: anthropic-api-key
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command: ["celery", "-A", "app.core.celery", "inspect", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command: ["celery", "-A", "app.core.celery", "inspect", "active"]
          initialDelaySeconds: 10
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64